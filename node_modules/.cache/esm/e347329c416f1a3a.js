let express,socket,dbConnection,errorHandler,axios,userRoute,userTransactionRoute;_416‍.w("express",[["default",["express"],function(v){express=v}]]);_416‍.w("socket.io",[["default",["socket"],function(v){socket=v}]]);_416‍.w("./database",[["default",["dbConnection"],function(v){dbConnection=v}]]);_416‍.w("./middlewares/errorHandler",[["default",["errorHandler"],function(v){errorHandler=v}]]);_416‍.w("axios",[["default",["axios"],function(v){axios=v}]]);_416‍.w("./routes",[["userRoute",["userRoute"],function(v){userRoute=v}],["userTransactionRoute",["userTransactionRoute"],function(v){userTransactionRoute=v}]]);






const app = express();

app.use(express.json());

dbConnection();

app.use('/api', userRoute);
app.use('/api', userTransactionRoute);

app.use(errorHandler);

const server = app.listen(5009, () => {
  console.log("Server running on port", 5009);
});

const io = socket(server, {
  pingTimeout: 60000,
  cors: {
    origin: "*",
  },
});

io.on("connection", (socket) => {
  console.log("Connected to socket.io");

  socket.on("signup", async (userData) => {
    
    try {
      const {data} = await axios.post('http://localhost:5009/api/signup', userData);
      socket.emit('result', { ...data })
    } catch (error) {
      socket.emit('error', { error: error.message ? error.message : 'Internal Server Error' })
    }

  });

  socket.on("login", async (loginCredentials) => {
    try {
      // console.log(loginCredentials);
      const {data} = await axios.post('http://localhost:5009/api/login', loginCredentials);
      socket.emit('result', { ...data })
    } catch (error) {
      socket.emit('error', error.response || error.message || 'Internal Server Error')
    }
  })

});


// Unhandled Promise Rejection
process.on("unhandledRejection", (err) => {
  console.log(`Error: ${err.message}`);
  console.log(`Shutting down the server due to Unhandled Promise Rejection`);

  server.close(() => {
    process.exit(1);
  });
});